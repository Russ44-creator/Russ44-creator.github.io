[{"title":"Tags","url":"/2023/09/21/14d342362f66aa86e2aa1c1e11aa1204/","content":"Research DiscoveryPersonal ProjectDaily LifeInsights\n"},{"title":"Some understanding of Shiro","url":"/2023/11/07/1b0a797ee682e571b9ca23871c09946e/","content":"This autumn, I embarked on a fascinating journey into the world of Shiro, a powerful and flexible framework for securing Java applications. Shiro, which means ‚Äúcastle‚Äù in Japanese, serves as a fortress for your applications, safeguarding them from unauthorized access and potential security vulnerabilities.\nMy Shiro learning experience has been both rewarding and enlightening. I delved into its features and found that it excels in handling authentication, authorization, and session management. With Shiro, I could easily secure my Java applications and protect sensitive data.\nOne of the highlights of my journey was learning how to configure Shiro‚Äôs security features with ease. Its simple, yet highly customizable configuration made it a joy to work with. I integrated Shiro into my application and set up authentication realms and permission sets, allowing for fine-grained control over user access.\nHere‚Äôs a glimpse of what I learned in code:\n    // Shiro INI configurationsecurityManager = org.apache.shiro.web.mgt.DefaultWebSecurityManagersecurityManager.realms = $myRealmmyRealm = com.example.MyRealmmyRealm.credentialsMatcher = $passwordMatcheruser123 = password123, adminguest = guestPassword, guest// Securing a web route with Shiro/login = authc/admin/** = authc, roles[admin]\n\nWith Shiro‚Äôs straightforward syntax, I could secure web routes, ensuring only authenticated users could access sensitive areas. I also learned how to protect specific routes based on user roles, granting or denying access accordingly.\nShiro‚Äôs session management was another vital aspect I explored. It offered a seamless way to handle user sessions, and I could easily configure session timeout, cookie settings, and session persistence options. This made my application not only secure but also user-friendly.\nIn conclusion, my autumn journey with Shiro has been an incredible learning experience. I‚Äôve gained a deeper understanding of application security and developed the skills to fortify my Java applications. Shiro‚Äôs flexibility and simplicity have made it a go-to choice for securing software, and I‚Äôm excited to continue honing my Shiro skills in the seasons to come. As the leaves change and autumn turns to winter, my commitment to safeguarding software remains as steadfast as ever.\n","categories":["Insights"],"tags":["Insights"]},{"title":"Elf Dynamic Linker","url":"/2023/09/23/3ecb9e75ca5ca9d3f65e40116c10e3e1/","content":"Elf Dynamic Linker\n","categories":["Personal Project"],"tags":["Personal Project"]},{"title":"About Me","url":"/2023/09/21/81d9f505441078e06980e0bd02616e94/","content":"Self-Introduction\nHi, I‚Äôm Lingfeng Deng, a Computer Science graduate student at Brown University. I‚Äôm passionate about software engineering and have had the opportunity to work on some exciting projects. One of my recent internships was at SAP, where I developed automation suites using Pytest and Selenium to improve product reliability and implemented CI/CD pipelines for efficient software delivery. I also worked at GUYEE, where I collaborated on building a multi-field intelligent IoT platform for Volkswagen, enhancing factory management using technologies like Spring Boot and Vue.js. Currently, I‚Äôm involved in research projects at Brown University, including the development of PaSh, a tool for automating parallelization of POSIX shell scripts, and research on network protocols.I love tackling challenging problems and learning new technologies. Feel free to explore my GitHub and LinkedIn profiles to see more of my work. Let‚Äôs connect and chat about tech, coding, or anything else that interests you! üòÑ\n\nEducation\n2023-08 - 2025-05 Brown University\n2022-01 - 2022-05 University of Wisconsin, Madison\n2019-08 - 2023-05 Xi‚Äôan Jiaotong University\n2016-08 - 2019-06 Chengdu No.7 High School\n\nWork Experience\n2022-07 - 2022-12 SAP, Xi‚Äôan China\n\n\n"},{"title":"Leveraging GraphQL for Efficient Data Retrieval in Your Application","url":"/2023/11/03/aa/","content":"In the ever-evolving landscape of web development, ensuring efficient data retrieval is crucial to creating high-performing and user-friendly applications. This is where GraphQL steps in, offering a versatile and powerful solution for managing data queries and retrieval.\nData Retrieval:\nOne of GraphQL‚Äôs standout features is its ability to allow frontend applications to request precisely the data they need, eliminating the over-fetching or under-fetching of data. This fine-grained control enables React components and other frontend technologies to use GraphQL queries to fetch specific fields or objects, aligning data retrieval with the component‚Äôs exact requirements. This not only optimizes data transfer but also enhances application performance.\nComponent Data Loading:\nGraphQL makes it possible to fetch necessary data when a component loads or mounts. This means that before a component even starts rendering, it already possesses the essential data it needs, ensuring a seamless and efficient user experience. With GraphQL, you can preload data into your components, minimizing the need for subsequent data requests during runtime.\nSharing Data Among Multiple Components:\nIn complex applications, multiple components often require access to the same data. GraphQL simplifies this process by allowing these components to share the same data query. As a result, you reduce data redundancy, save on resources, and ensure data consistency across different parts of your application.\nLazy Loading:\nGraphQL supports on-demand data loading, which is a powerful feature when dealing with large datasets. With GraphQL, you can fetch data only when the user explicitly requests it. This approach is in stark contrast to traditional REST APIs, which often return fixed data sets. Lazy loading not only boosts application performance but also results in more efficient use of server resources.\nData Caching:\nMany GraphQL client libraries, such as Apollo Client, come equipped with data caching capabilities. This feature allows you to cache data locally, reducing the need for repeated server requests. By caching data on the client side, your application can continue to function offline or with intermittent connectivity, delivering a smoother user experience.\nDynamic Data:\nOne of GraphQL‚Äôs powerful capabilities is its ability to handle dynamic data. By passing variables to GraphQL queries, you can dynamically construct queries based on user input or application state. This flexibility makes it easier to build dynamic and interactive applications that respond in real-time to user actions.\nConclusion:\nGraphQL is a game-changer when it comes to data retrieval in web applications. Its ability to optimize data fetching, enable lazy loading, support data caching, and accommodate dynamic data requirements makes it a valuable tool for enhancing the performance and user experience of modern web applications. With GraphQL, you can take your data retrieval strategies to the next level, providing users with fast and efficient access to the information they need.\n","categories":["Insights"],"tags":["Insights"]},{"title":"Hello World","url":"/2023/09/21/b10a8db164e0754105b7a99be72e3fe5/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Some understanding of CTF","url":"/2023/10/31/ctf/","content":"Capture the Flag (CTF) competitions are becoming an increasingly popular way for cybersecurity enthusiasts to test and improve their skills. CTFs involve participants solving challenges and puzzles in categories like cryptography, reverse engineering, web exploitation, and binary exploitation, in order to capture ‚Äúflags‚Äù which are often in the form of codes or keys. Successfully capturing flags demonstrates a mastery of various cybersecurity concepts and techniques.\nWhile CTFs originate from the information security community, they provide valuable experience for any software developer looking to improve their security skills. Here are some reasons why CTFs and software security are worth understanding for any programmer:\nReal-world experience - CTF challenges are based on vulnerabilities and techniques used by hackers in the wild. Participating in CTFs gives you hands-on experience dealing with common software exploits like SQL injection, cross-site scripting, buffer overflows, etc. Identifying and patching these vulnerabilities will make you a better developer.Learn cybersecurity fundamentals - Core infosec concepts like encryption, hashes, encoding, cryptography, binaries, networking, and more are central to solving CTF challenges. Mastering these foundational building blocks is key for writing secure code.Gain offensive security insights - To find flaws and holes in CTF challenges, you need to think like an attacker and understand offensive security methodologies. This knowledge enables you to build robust systems capable of withstanding real hacking attempts.Practice makes perfect - The more CTFs you participate in, the better you get at things like quickly analyzing unknown code, identifying vulnerabilities, making connections, and finding creative solutions. These coding and problem-solving skills transfer directly to software development.Compete and benchmark skills - CTFs allow you to test your abilities against security experts around the world. Seeing how you rank compared to others can help motivate further learning and identify areas in need of improvement.While CTFs can involve some specialized security skills like expertise in certain tools or technical protocols, the core concepts align closely with secure coding best practices. Learning through CTF challenges helps instill the mindset and thought processes necessary for writing robust, hack-resistant software.\n","categories":["Insights"],"tags":["Insights"]},{"title":"Categories","url":"/2023/09/21/d0771a42bbc49a6941f59913fcda35e3/","content":"Research DiscoveryPersonal ProjectDaily LifeInsights\n"},{"title":"ÊµãËØïÊñáÁ´†","url":"/2022/03/17/eb1908cb6cc7c14ffa02a18a052710e9/","content":"ÊµãËØïÊëòË¶ÅÔºÅÔºÅ\n\n\nÊ†áÈ¢ò‰∏Ä‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ\n‰ª£Á†Å‰∏Äecho &quot;hello world!!&quot;\n\nË°®Ê†º‰∏Ä\n\n\nÊ†áÈ¢ò1\nÊ†áÈ¢ò2\nÊ†áÈ¢ò3\n\n\n\n1\n1\n1\n\n\n2\n2\n2\n\n\n3\n3\n3\n\n\nÊµÅÁ®ãÂõæsequenceDiagram\n    Â∞èÁ®ãÂ∫è ->> Â∞èÁ®ãÂ∫è : wx.login()Ëé∑Âèñcode\n    Â∞èÁ®ãÂ∫è ->> + ÊúçÂä°Âô® : wx.request()ÂèëÈÄÅcode\n    ÊúçÂä°Âô® ->> + ÂæÆ‰ø°ÊúçÂä°Âô® : code+appid+secret\n    ÂæÆ‰ø°ÊúçÂä°Âô® -->> - ÊúçÂä°Âô® : openid\n    ÊúçÂä°Âô® ->> ÊúçÂä°Âô® : Ê†πÊçÆopenidÁ°ÆÂÆöÁî®Êà∑Âπ∂ÁîüÊàêtoken\n    ÊúçÂä°Âô® -->> - Â∞èÁ®ãÂ∫è : token\n\n\nflowchart LR\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n\n\n\n\nst=>start: Start:> http://www.google.com[blank]\ne=>end: End :>http://www.google.com\nop1=>operation: My Operation\nsub1=>subroutine: My Subroutine\ncond=>condition: Yes\nor No?:>http://www.google.com\nio=>inputoutput: catch something...\npara=>parallel: parallel tasks\n\nst->op1->cond\ncond(yes)->io->e\ncond(no)->para\npara(path1, bottom)->sub1(right)->op1\npara(path2, top)->op1{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);st=>start: Start|past:>http://www.google.com[blank]\ne=>end: End:>http://www.google.com\nop1=>operation: My Operation|past\nop2=>operation: Stuff|current\nsub1=>subroutine: My Subroutine|invalid\ncond=>condition: Yes\nor No?|approved:>http://www.google.com\nc2=>condition: Good idea|rejected\nio=>inputoutput: catch something...|request\n\nst->op1(right)->cond\ncond(yes, right)->c2\ncond(no)->sub1(left)->op1\nc2(yes)->io->e\nc2(no)->op2->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}  var code = document.getElementById(\"flowchart-1-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-1-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-1\", options);","categories":["ÊµãËØï"],"tags":["ÊµãËØï"]}]